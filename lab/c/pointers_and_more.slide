Programación 2
Laboratorio: Punteros y otras construcciones en C
1 Oct 2015
Tags: c, pointers, structures

* Memoria
- La memoria de un programa puede verse como una secuencia finita de bytes

- Cada byte tiene una dirección que lo identifica

.image support/memory.png

- Un char ocupa 1 byte, un int ocupa 4 bytes y para un arreglo dependerá de su tipo y tamaño
.image support/memory2.png



* Punteros
- Un puntero es una variable cuyo valor es la dirección de memoria de otra variable
.image support/pointer.png
*b* es una variable entera que contiene el valor 21 y *a* es un puntero que contiene la dirección de *b*

- Un puntero se declara con el tipo de la variable a la que se apunta seguido de un *

  int *a;	// a es un puntero a entero
  
- El operador unario & devuelve la dirección de memoria de una variable

  int b = 21;
  a = &b;	// a "apunta a" b
  
  
  
* Punteros (2)
- El operador unario * se utiliza, además de para declarar punteros, para poder obtener el valor de la variable apuntada. A esto lo llamamos "desreferenciar".

  printf("El valor apuntado por a es %d\n", *a);
  
- Otras operaciones:
  
  int x = 1, y = 2, z[10];
  int *ip; 	// ip es un puntero a int
  ip = &x; 	// ip ahora apunta a x
  y = *ip; 	// y es ahora 1
  *ip = 0; 	// x es ahora 0
  ip = &z[0];  // ip ahora apunta a z[0]
  
- Al operador & ya lo habíamos usado para leer valores de la entrada!

  int p;
  scanf("%d", &p);	// a scanf le pasamos la dirección de p para que pueda modificar su valor
  
  
  
* Punteros y funciones
- Las funciones en C toman parámetros por valor, hacen copias de los mismos
- Cómo hacemos para escribir una función que intercambie los valores de dos enteros?
.code ejemplos/swap1.c /^//fin-main/,/fin-swap1/
.code ejemplos/swap1.c /^#include/,/fin-main/


  
* Punteros y funciones (2)
- Necesitamos usar punteros!
.code ejemplos/swap2.c /^//fin-main/,/fin-swap2/
.code ejemplos/swap2.c /^#include/,/fin-main/
- swap2 no modificó sus parámetros sino las variables apuntadas por ellos!


* Punteros y arreglos

  int a[10];  
  
.image support/array.png
  
a[i] hace referencia al i-ésimo elemento del arreglo

  int *pa;
  pa = &a[0];  
hace que pa apunte al primer elemento del arreglo

.image support/pointer_to_array.png



* Punteros y arreglos (2)
.code ejemplos/pointers_arrays.c  /^int main/,/return/

Salida:

  10      10      10      10      0x7ffe1a239ec0
  20      20      20      20      0x7ffe1a239ec4
  30      30      30      30      0x7ffe1a239ec8
  40      40      40      40      0x7ffe1a239ecc
  50      50      50      50      0x7ffe1a239ed0
  60      60      60      60      0x7ffe1a239ed4
  70      70      70      70      0x7ffe1a239ed8
  80      80      80      80      0x7ffe1a239edc
  90      90      90      90      0x7ffe1a239ee0
  100     100     100     100     0x7ffe1a239ee4

  
  
* Punteros y arreglos (3)

- Si p es un puntero con la dirección del elemento x de un arreglo entonces p+i apunta a i elementos después de x
- El nombre de un arreglo referencia a la dirección del primer elemento del arreglo
- Las siguientes sentencias son válidas:

  int a[10] = {10,20,30,40,50,60,70,80,90,100};
  int *p = &a;
  p = p+1;
  
- Sin embargo, lo siguiente no puede hacerse:

  int a[10] = {10,20,30,40,50,60,70,80,90,100};
  a = a + 1;	// a no es una variable!

  
* Punteros de caracteres

- Una cadena constante, como "Soy una cadena", es un arreglo de caracteres

  printf("Hola mundo\n");  // Se accede a través de un puntero al primer caracter
- Las siguientes son diferentes:

  char arr[] = "Hola mundo\n";  // Es un arreglo cuyo contenido puede modificarse
  char *s = "Hola mundo\n";     // Es un puntero a una cadena constante
  
- Aunque ambas podrían pasarse a la siguiente función:
                               
.code ejemplos/char_pointers.c  /^int my_strlen/,/fin/


* Arreglos multidimensionales

- Declaración: 

  int a[3][4];	// 3 es la cant. de filas y 4 la cant. de columnas  
 
- Inicialización:

  a = {
    {4, 21, 1, 2},
    {9, 7, 11, 3},
    {44, 9, 0, -5}
  };
  
  int b[2][2] = {{1,2}, {3,4}};  // Declara e inicializa en una misma línea  

- Acceso a un elemento:

  printf("El valor del arreglo a en la fila i, columna j, es %d\n", a[i][j]);
  
  // i puede estar entre 0 y 2; j puede estar entre 0 y 3
  
  
  
* Arreglos multidimensionales (2)

Ejemplo: obtener el día del año dados año, mes y día del mes

.code ejemplos/arrays_multi.c /^char daytab/,/fin-daytab/

.code ejemplos/arrays_multi.c /^int is_leap/,/fin-is_leap/

.code ejemplos/arrays_multi.c /^int day_of_year/,/fin-day_of_year/



* Arreglos multidimensionales (3)

Ejemplo: obtener mes y día del mes dados año y día del año

.code ejemplos/arrays_multi.c /^void month_day/,/fin-month_day/